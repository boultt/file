# hill climb

import copy

start = [[1, 3, 5], [4, None, 2], [6, 7, 8]]
goal = [[1, 3, None], [4, 2, 5], [6, 7, 8]]

def checkGoal(start, goal):
    if start == goal:
        return True
    return False

def misplacedTiles(start, goal):
    count = 0
    for i in range(3):
        for j in range(3):
            if start[i][j] != goal[i][j] and start[i][j] is not None:
                count += 1
    return count

def manhattanDistance(start, goal):
    count = 0
    for i in range(3):
        for j in range(3):
            if start[i][j] is not None:
                for k in range(3):
                    for l in range(3):
                        if start[i][j] == goal[k][l]:
                            count += abs(i - k) + abs(j - l)
    return count

def emptySpace(start):
    for i in range(3):
        for j in range(3):
            if start[i][j] == None:
                return i, j

def moveUp(start):
    i, j = emptySpace(start)
    if i == 0:
        return None
    else:
        start[i][j] = start[i - 1][j]
        start[i - 1][j] = None
        return start

def moveDown(start):
    i, j = emptySpace(start)
    if i == 2:
        return None
    else:
        start[i][j] = start[i + 1][j]
        start[i + 1][j] = None
        return start

def moveLeft(start):
    i, j = emptySpace(start)
    if j == 0:
        return None
    else:
        start[i][j] = start[i][j - 1]
        start[i][j - 1] = None
        return start

def moveRight(start):
    i, j = emptySpace(start)
    if j == 2:
        return None
    else:
        start[i][j] = start[i][j + 1]
        start[i][j + 1] = None
        return start

def generateMoves(start):
    moves = []
    up = moveUp(copy.deepcopy(start))
    down = moveDown(copy.deepcopy(start))
    left = moveLeft(copy.deepcopy(start))
    right = moveRight(copy.deepcopy(start))
    
    if up is not None:
        moves.append(up)
    if down is not None:
        moves.append(down)
    if left is not None:
        moves.append(left)
    if right is not None:
        moves.append(right)
    
    return moves

def generateStates(start):
    states = []
    moves = generateMoves(start)
    for move in moves:
        if move not in states:
            states.append(move)
    return states

def hillClimb(start, goal, heuristic='misplaced'):
    current_state = copy.deepcopy(start)
    iteration = 0
    while True:
        print(f"Iteration {iteration}: Current state:")
        for row in current_state:
            print(row)
        
        if checkGoal(current_state, goal):
            print("Goal reached!")
            return current_state
        
        neighbors = generateStates(current_state)
        
        if not neighbors:
            print("No solution found. Stuck in local maximum.")
            return current_state
        
        best_move = None
        best_heuristic_value = float('inf')
        
        for neighbor in neighbors:
            if heuristic == 'misplaced':
                heuristic_value = misplacedTiles(neighbor, goal)
            elif heuristic == 'manhattan':
                heuristic_value = manhattanDistance(neighbor, goal)
            
            if heuristic_value < best_heuristic_value:
                best_heuristic_value = heuristic_value
                best_move = neighbor
        
        if best_heuristic_value >= misplacedTiles(current_state, goal):
            print("No better move found. Stuck in local maximum.")
            return current_state
        
        current_state = best_move
        iteration += 1

result = hillClimb(start, goal, heuristic='misplaced')

print("Final state:")
for row in result:
    print(row)
